package ru.lot.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ru.lot.dao.DrawDao;
import ru.lot.dao.InvoiceDao;
import ru.lot.dao.PaymentDao;
import ru.lot.dao.TicketDao;
import ru.lot.entity.*;
import ru.lot.enums.InvoiceStatus;
import ru.lot.enums.PaymentStatus;
import ru.lot.enums.TicketStatus;

import java.time.Instant;
import java.util.HashSet;
import java.util.Objects;
import java.util.Random;
import java.util.Set;

@Service
public class PaymentServiceImpl implements PaymentService {
    private InvoiceDao invoiceDao;
    private PaymentDao paymentDao;
    private DrawDao drawDao;
    private TicketDao ticketDao;

    @Autowired
    public PaymentServiceImpl(InvoiceDao invoiceDao, PaymentDao paymentDao, DrawDao drawDao, TicketDao ticketDao) {
        this.invoiceDao = invoiceDao;
        this.paymentDao = paymentDao;
        this.drawDao = drawDao;
        this.ticketDao = ticketDao;
    }

    @Override
    public Payment createPayment(User currentUser, Long invoiceId, Long cvc, String cardNumber, Double amount) {
        Invoice invoice = invoiceDao.getReferenceById(invoiceId);
        Draw draw = invoice.getDraw();
        if (invoice.getStatus().equals(InvoiceStatus.CANCELED)) {
            throw new IllegalArgumentException("Invoice was cancelled");
        }
        if (!Objects.equals(draw.getLotteryType().getPrice(), amount)) {
            throw new IllegalArgumentException("Wrong payment amount");
        }
        Payment payment = new Payment();
        payment.setAmount(amount);
        payment.setPaymentTime(Instant.now());
        payment.setInvoice(invoice);
        if (cardNumber.equals("123") || new Random().nextInt(5) < 4) {
            payment.setStatus(PaymentStatus.SUCCESS);
            Ticket ticket = new Ticket();
            ticket.setDraw(draw);
            ticket.setUser(currentUser);
            ticket.setPickedNumbers(invoice.getPickedNumbers());
            ticket.setStatus(TicketStatus.PENDING);
            ticketDao.save(ticket);
        } else {
            invoice.setStatus(InvoiceStatus.CANCELED);
            invoiceDao.save(invoice);
            payment.setStatus(PaymentStatus.FAILED);
        }
        return paymentDao.save(payment);
    }

    @Override
    public Invoice createInvoice(User currentUser, String selectedNumbers, Long drawId) {
        Draw draw = drawDao.getReferenceById(drawId);
        if (draw.getLotteryType().getIsAutogenerated()) {
            if (selectedNumbers != null) {
                throw new IllegalArgumentException("Can not select numbers on this lottery type");
            } else {
                switch (draw.getLotteryType().getName()) {
                    case FIVE_OUT_OF_36: {
                        selectedNumbers = generateNumbers(36, 5);
                        break;
                    }
                    case SIX_OUT_OF_45: {
                        selectedNumbers = generateNumbers(45, 6);
                        break;
                    }
                }
            }
        }
        Invoice invoice = new Invoice();
        invoice.setStatus(InvoiceStatus.REGISTERED);
        invoice.setDraw(drawDao.getReferenceById(drawId));
        invoice.setPickedNumbers(selectedNumbers);
        invoice.setRegisterTime(Instant.now());

        return invoiceDao.save(invoice);
    }

    private String generateNumbers(Integer rightBorder, Integer countOfNumbers) {
        Set<Integer> numbers = new HashSet<>();
        Random rand = new Random();

        while (numbers.size() < countOfNumbers) {
            Integer generatedNum = rand.nextInt(rightBorder + 1);
            if (!numbers.contains(generatedNum)) {
                numbers.add(generatedNum);
            }
        }
        Integer[] numArr = numbers.toArray(new Integer[0]);
        StringBuilder resWithDelimeter = new StringBuilder();
        for (Integer num : numArr) {
            resWithDelimeter.append(num).append(",");
        }
        resWithDelimeter = new StringBuilder(resWithDelimeter.substring(0, resWithDelimeter.length() - 1));
        return resWithDelimeter.toString();
    }
}
